In the following document I will expose my choices about the DTD desing, choices concern:

1. Avoiding Redundance

During serialization redundancy can be generated by the presence of information about object's relationtships.
If I can access to an object A from two different objects (B and C), those objects contains the same information (A).
In my case I've avoid some redundancy:
    - Every Policies is bounded to one and only one NFFG so instead of putting a reference to the NFFG in each policy,
        and have all the policy in the same place, I've decided to group them into their referencing NFFG.
        The set of all Policies can be deduced from the set of Policies of each NFFG
    - As each link is between a source and a destination Node, and each node has is set of node having it as source,
        a link doesn't need to contain information about is source because is contained into the set of link with a
        common source node.

2. Data Type

The functional type of each node can be represented using an enumereted list.
This method can't be used into the representation of the list of traversed functional types for a Traversed Policy
 as it is a list. So it's a common PCDATA

3. Date and Time Format

To avoid inconsistencies in date and time I suppose the following representation:
dd/MM/yyyy HH:mm:ss z --> day/month/year hour:minute:second time_zone
In the Java language this format can be easly converted into GregorianCalendar class.